// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-image-importer/api"
	"sync"
)

var (
	lockVaultClienterMockChecker sync.RWMutex
	lockVaultClienterMockRead    sync.RWMutex
	lockVaultClienterMockWrite   sync.RWMutex
)

// Ensure, that VaultClienterMock does implement VaultClienter.
// If this is not the case, regenerate this file with moq.
var _ api.VaultClienter = &VaultClienterMock{}

// VaultClienterMock is a mock implementation of api.VaultClienter.
//
//     func TestSomethingThatUsesVaultClienter(t *testing.T) {
//
//         // make and configure a mocked api.VaultClienter
//         mockedVaultClienter := &VaultClienterMock{
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             ReadFunc: func(path string) (map[string]interface{}, error) {
// 	               panic("mock out the Read method")
//             },
//             WriteFunc: func(path string, data map[string]interface{}) error {
// 	               panic("mock out the Write method")
//             },
//         }
//
//         // use mockedVaultClienter in code that requires api.VaultClienter
//         // and then make assertions.
//
//     }
type VaultClienterMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// ReadFunc mocks the Read method.
	ReadFunc func(path string) (map[string]interface{}, error)

	// WriteFunc mocks the Write method.
	WriteFunc func(path string, data map[string]interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Path is the path argument value.
			Path string
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// Path is the path argument value.
			Path string
			// Data is the data argument value.
			Data map[string]interface{}
		}
	}
}

// Checker calls CheckerFunc.
func (mock *VaultClienterMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("VaultClienterMock.CheckerFunc: method is nil but VaultClienter.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	lockVaultClienterMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockVaultClienterMockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedVaultClienter.CheckerCalls())
func (mock *VaultClienterMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	lockVaultClienterMockChecker.RLock()
	calls = mock.calls.Checker
	lockVaultClienterMockChecker.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *VaultClienterMock) Read(path string) (map[string]interface{}, error) {
	if mock.ReadFunc == nil {
		panic("VaultClienterMock.ReadFunc: method is nil but VaultClienter.Read was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	lockVaultClienterMockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	lockVaultClienterMockRead.Unlock()
	return mock.ReadFunc(path)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedVaultClienter.ReadCalls())
func (mock *VaultClienterMock) ReadCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	lockVaultClienterMockRead.RLock()
	calls = mock.calls.Read
	lockVaultClienterMockRead.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *VaultClienterMock) Write(path string, data map[string]interface{}) error {
	if mock.WriteFunc == nil {
		panic("VaultClienterMock.WriteFunc: method is nil but VaultClienter.Write was just called")
	}
	callInfo := struct {
		Path string
		Data map[string]interface{}
	}{
		Path: path,
		Data: data,
	}
	lockVaultClienterMockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	lockVaultClienterMockWrite.Unlock()
	return mock.WriteFunc(path, data)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//     len(mockedVaultClienter.WriteCalls())
func (mock *VaultClienterMock) WriteCalls() []struct {
	Path string
	Data map[string]interface{}
} {
	var calls []struct {
		Path string
		Data map[string]interface{}
	}
	lockVaultClienterMockWrite.RLock()
	calls = mock.calls.Write
	lockVaultClienterMockWrite.RUnlock()
	return calls
}
