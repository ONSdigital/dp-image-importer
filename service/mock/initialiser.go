// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-image-importer/config"
	"github.com/ONSdigital/dp-image-importer/event"
	"github.com/ONSdigital/dp-image-importer/service"
	kafka "github.com/ONSdigital/dp-kafka/v2"
	"github.com/aws/aws-sdk-go-v2/aws"
	"net/http"
	"sync"
)

// Ensure, that InitialiserMock does implement service.Initialiser.
// If this is not the case, regenerate this file with moq.
var _ service.Initialiser = &InitialiserMock{}

// InitialiserMock is a mock implementation of service.Initialiser.
//
//	func TestSomethingThatUsesInitialiser(t *testing.T) {
//
//		// make and configure a mocked service.Initialiser
//		mockedInitialiser := &InitialiserMock{
//			DoGetHTTPServerFunc: func(bindAddr string, router http.Handler) service.HTTPServer {
//				panic("mock out the DoGetHTTPServer method")
//			},
//			DoGetHealthCheckFunc: func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
//				panic("mock out the DoGetHealthCheck method")
//			},
//			DoGetImageAPIFunc: func(ctx context.Context, cfg *config.Config) event.ImageAPIClient {
//				panic("mock out the DoGetImageAPI method")
//			},
//			DoGetKafkaConsumerFunc: func(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error) {
//				panic("mock out the DoGetKafkaConsumer method")
//			},
//			DoGetS3ClientFunc: func(ctx context.Context, awsRegion string, bucketName string) (event.S3Writer, error) {
//				panic("mock out the DoGetS3Client method")
//			},
//			DoGetS3ClientWithConfigFunc: func(bucketName string, cfg aws.Config) event.S3Reader {
//				panic("mock out the DoGetS3ClientWithConfig method")
//			},
//		}
//
//		// use mockedInitialiser in code that requires service.Initialiser
//		// and then make assertions.
//
//	}
type InitialiserMock struct {
	// DoGetHTTPServerFunc mocks the DoGetHTTPServer method.
	DoGetHTTPServerFunc func(bindAddr string, router http.Handler) service.HTTPServer

	// DoGetHealthCheckFunc mocks the DoGetHealthCheck method.
	DoGetHealthCheckFunc func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error)

	// DoGetImageAPIFunc mocks the DoGetImageAPI method.
	DoGetImageAPIFunc func(ctx context.Context, cfg *config.Config) event.ImageAPIClient

	// DoGetKafkaConsumerFunc mocks the DoGetKafkaConsumer method.
	DoGetKafkaConsumerFunc func(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error)

	// DoGetS3ClientFunc mocks the DoGetS3Client method.
	DoGetS3ClientFunc func(ctx context.Context, awsRegion string, bucketName string) (event.S3Writer, error)

	// DoGetS3ClientWithConfigFunc mocks the DoGetS3ClientWithConfig method.
	DoGetS3ClientWithConfigFunc func(bucketName string, cfg aws.Config) event.S3Reader

	// calls tracks calls to the methods.
	calls struct {
		// DoGetHTTPServer holds details about calls to the DoGetHTTPServer method.
		DoGetHTTPServer []struct {
			// BindAddr is the bindAddr argument value.
			BindAddr string
			// Router is the router argument value.
			Router http.Handler
		}
		// DoGetHealthCheck holds details about calls to the DoGetHealthCheck method.
		DoGetHealthCheck []struct {
			// Cfg is the cfg argument value.
			Cfg *config.Config
			// BuildTime is the buildTime argument value.
			BuildTime string
			// GitCommit is the gitCommit argument value.
			GitCommit string
			// Version is the version argument value.
			Version string
		}
		// DoGetImageAPI holds details about calls to the DoGetImageAPI method.
		DoGetImageAPI []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// DoGetKafkaConsumer holds details about calls to the DoGetKafkaConsumer method.
		DoGetKafkaConsumer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// DoGetS3Client holds details about calls to the DoGetS3Client method.
		DoGetS3Client []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AwsRegion is the awsRegion argument value.
			AwsRegion string
			// BucketName is the bucketName argument value.
			BucketName string
		}
		// DoGetS3ClientWithConfig holds details about calls to the DoGetS3ClientWithConfig method.
		DoGetS3ClientWithConfig []struct {
			// BucketName is the bucketName argument value.
			BucketName string
			// Cfg is the cfg argument value.
			Cfg aws.Config
		}
	}
	lockDoGetHTTPServer         sync.RWMutex
	lockDoGetHealthCheck        sync.RWMutex
	lockDoGetImageAPI           sync.RWMutex
	lockDoGetKafkaConsumer      sync.RWMutex
	lockDoGetS3Client           sync.RWMutex
	lockDoGetS3ClientWithConfig sync.RWMutex
}

// DoGetHTTPServer calls DoGetHTTPServerFunc.
func (mock *InitialiserMock) DoGetHTTPServer(bindAddr string, router http.Handler) service.HTTPServer {
	if mock.DoGetHTTPServerFunc == nil {
		panic("InitialiserMock.DoGetHTTPServerFunc: method is nil but Initialiser.DoGetHTTPServer was just called")
	}
	callInfo := struct {
		BindAddr string
		Router   http.Handler
	}{
		BindAddr: bindAddr,
		Router:   router,
	}
	mock.lockDoGetHTTPServer.Lock()
	mock.calls.DoGetHTTPServer = append(mock.calls.DoGetHTTPServer, callInfo)
	mock.lockDoGetHTTPServer.Unlock()
	return mock.DoGetHTTPServerFunc(bindAddr, router)
}

// DoGetHTTPServerCalls gets all the calls that were made to DoGetHTTPServer.
// Check the length with:
//
//	len(mockedInitialiser.DoGetHTTPServerCalls())
func (mock *InitialiserMock) DoGetHTTPServerCalls() []struct {
	BindAddr string
	Router   http.Handler
} {
	var calls []struct {
		BindAddr string
		Router   http.Handler
	}
	mock.lockDoGetHTTPServer.RLock()
	calls = mock.calls.DoGetHTTPServer
	mock.lockDoGetHTTPServer.RUnlock()
	return calls
}

// DoGetHealthCheck calls DoGetHealthCheckFunc.
func (mock *InitialiserMock) DoGetHealthCheck(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
	if mock.DoGetHealthCheckFunc == nil {
		panic("InitialiserMock.DoGetHealthCheckFunc: method is nil but Initialiser.DoGetHealthCheck was just called")
	}
	callInfo := struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}{
		Cfg:       cfg,
		BuildTime: buildTime,
		GitCommit: gitCommit,
		Version:   version,
	}
	mock.lockDoGetHealthCheck.Lock()
	mock.calls.DoGetHealthCheck = append(mock.calls.DoGetHealthCheck, callInfo)
	mock.lockDoGetHealthCheck.Unlock()
	return mock.DoGetHealthCheckFunc(cfg, buildTime, gitCommit, version)
}

// DoGetHealthCheckCalls gets all the calls that were made to DoGetHealthCheck.
// Check the length with:
//
//	len(mockedInitialiser.DoGetHealthCheckCalls())
func (mock *InitialiserMock) DoGetHealthCheckCalls() []struct {
	Cfg       *config.Config
	BuildTime string
	GitCommit string
	Version   string
} {
	var calls []struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}
	mock.lockDoGetHealthCheck.RLock()
	calls = mock.calls.DoGetHealthCheck
	mock.lockDoGetHealthCheck.RUnlock()
	return calls
}

// DoGetImageAPI calls DoGetImageAPIFunc.
func (mock *InitialiserMock) DoGetImageAPI(ctx context.Context, cfg *config.Config) event.ImageAPIClient {
	if mock.DoGetImageAPIFunc == nil {
		panic("InitialiserMock.DoGetImageAPIFunc: method is nil but Initialiser.DoGetImageAPI was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cfg *config.Config
	}{
		Ctx: ctx,
		Cfg: cfg,
	}
	mock.lockDoGetImageAPI.Lock()
	mock.calls.DoGetImageAPI = append(mock.calls.DoGetImageAPI, callInfo)
	mock.lockDoGetImageAPI.Unlock()
	return mock.DoGetImageAPIFunc(ctx, cfg)
}

// DoGetImageAPICalls gets all the calls that were made to DoGetImageAPI.
// Check the length with:
//
//	len(mockedInitialiser.DoGetImageAPICalls())
func (mock *InitialiserMock) DoGetImageAPICalls() []struct {
	Ctx context.Context
	Cfg *config.Config
} {
	var calls []struct {
		Ctx context.Context
		Cfg *config.Config
	}
	mock.lockDoGetImageAPI.RLock()
	calls = mock.calls.DoGetImageAPI
	mock.lockDoGetImageAPI.RUnlock()
	return calls
}

// DoGetKafkaConsumer calls DoGetKafkaConsumerFunc.
func (mock *InitialiserMock) DoGetKafkaConsumer(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error) {
	if mock.DoGetKafkaConsumerFunc == nil {
		panic("InitialiserMock.DoGetKafkaConsumerFunc: method is nil but Initialiser.DoGetKafkaConsumer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cfg *config.Config
	}{
		Ctx: ctx,
		Cfg: cfg,
	}
	mock.lockDoGetKafkaConsumer.Lock()
	mock.calls.DoGetKafkaConsumer = append(mock.calls.DoGetKafkaConsumer, callInfo)
	mock.lockDoGetKafkaConsumer.Unlock()
	return mock.DoGetKafkaConsumerFunc(ctx, cfg)
}

// DoGetKafkaConsumerCalls gets all the calls that were made to DoGetKafkaConsumer.
// Check the length with:
//
//	len(mockedInitialiser.DoGetKafkaConsumerCalls())
func (mock *InitialiserMock) DoGetKafkaConsumerCalls() []struct {
	Ctx context.Context
	Cfg *config.Config
} {
	var calls []struct {
		Ctx context.Context
		Cfg *config.Config
	}
	mock.lockDoGetKafkaConsumer.RLock()
	calls = mock.calls.DoGetKafkaConsumer
	mock.lockDoGetKafkaConsumer.RUnlock()
	return calls
}

// DoGetS3Client calls DoGetS3ClientFunc.
func (mock *InitialiserMock) DoGetS3Client(ctx context.Context, awsRegion string, bucketName string) (event.S3Writer, error) {
	if mock.DoGetS3ClientFunc == nil {
		panic("InitialiserMock.DoGetS3ClientFunc: method is nil but Initialiser.DoGetS3Client was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		AwsRegion  string
		BucketName string
	}{
		Ctx:        ctx,
		AwsRegion:  awsRegion,
		BucketName: bucketName,
	}
	mock.lockDoGetS3Client.Lock()
	mock.calls.DoGetS3Client = append(mock.calls.DoGetS3Client, callInfo)
	mock.lockDoGetS3Client.Unlock()
	return mock.DoGetS3ClientFunc(ctx, awsRegion, bucketName)
}

// DoGetS3ClientCalls gets all the calls that were made to DoGetS3Client.
// Check the length with:
//
//	len(mockedInitialiser.DoGetS3ClientCalls())
func (mock *InitialiserMock) DoGetS3ClientCalls() []struct {
	Ctx        context.Context
	AwsRegion  string
	BucketName string
} {
	var calls []struct {
		Ctx        context.Context
		AwsRegion  string
		BucketName string
	}
	mock.lockDoGetS3Client.RLock()
	calls = mock.calls.DoGetS3Client
	mock.lockDoGetS3Client.RUnlock()
	return calls
}

// DoGetS3ClientWithConfig calls DoGetS3ClientWithConfigFunc.
func (mock *InitialiserMock) DoGetS3ClientWithConfig(bucketName string, cfg aws.Config) event.S3Reader {
	if mock.DoGetS3ClientWithConfigFunc == nil {
		panic("InitialiserMock.DoGetS3ClientWithConfigFunc: method is nil but Initialiser.DoGetS3ClientWithConfig was just called")
	}
	callInfo := struct {
		BucketName string
		Cfg        aws.Config
	}{
		BucketName: bucketName,
		Cfg:        cfg,
	}
	mock.lockDoGetS3ClientWithConfig.Lock()
	mock.calls.DoGetS3ClientWithConfig = append(mock.calls.DoGetS3ClientWithConfig, callInfo)
	mock.lockDoGetS3ClientWithConfig.Unlock()
	return mock.DoGetS3ClientWithConfigFunc(bucketName, cfg)
}

// DoGetS3ClientWithConfigCalls gets all the calls that were made to DoGetS3ClientWithConfig.
// Check the length with:
//
//	len(mockedInitialiser.DoGetS3ClientWithConfigCalls())
func (mock *InitialiserMock) DoGetS3ClientWithConfigCalls() []struct {
	BucketName string
	Cfg        aws.Config
} {
	var calls []struct {
		BucketName string
		Cfg        aws.Config
	}
	mock.lockDoGetS3ClientWithConfig.RLock()
	calls = mock.calls.DoGetS3ClientWithConfig
	mock.lockDoGetS3ClientWithConfig.RUnlock()
	return calls
}
