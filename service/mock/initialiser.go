// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-image-importer/config"
	"github.com/ONSdigital/dp-image-importer/event"
	"github.com/ONSdigital/dp-image-importer/service"
	"github.com/ONSdigital/dp-kafka/v2"
	"github.com/aws/aws-sdk-go/aws/session"
	"net/http"
	"sync"
)

var (
	lockInitialiserMockDoGetHTTPServer          sync.RWMutex
	lockInitialiserMockDoGetHealthCheck         sync.RWMutex
	lockInitialiserMockDoGetImageAPI            sync.RWMutex
	lockInitialiserMockDoGetKafkaConsumer       sync.RWMutex
	lockInitialiserMockDoGetS3Client            sync.RWMutex
	lockInitialiserMockDoGetS3ClientWithSession sync.RWMutex
)

// Ensure, that InitialiserMock does implement Initialiser.
// If this is not the case, regenerate this file with moq.
var _ service.Initialiser = &InitialiserMock{}

// InitialiserMock is a mock implementation of service.Initialiser.
//
//     func TestSomethingThatUsesInitialiser(t *testing.T) {
//
//         // make and configure a mocked service.Initialiser
//         mockedInitialiser := &InitialiserMock{
//             DoGetHTTPServerFunc: func(bindAddr string, router http.Handler) service.HTTPServer {
// 	               panic("mock out the DoGetHTTPServer method")
//             },
//             DoGetHealthCheckFunc: func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
// 	               panic("mock out the DoGetHealthCheck method")
//             },
//             DoGetImageAPIFunc: func(ctx context.Context, cfg *config.Config) event.ImageAPIClient {
// 	               panic("mock out the DoGetImageAPI method")
//             },
//             DoGetKafkaConsumerFunc: func(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error) {
// 	               panic("mock out the DoGetKafkaConsumer method")
//             },
//             DoGetS3ClientFunc: func(awsRegion string, bucketName string, encryptionEnabled bool) (event.S3Writer, error) {
// 	               panic("mock out the DoGetS3Client method")
//             },
//             DoGetS3ClientWithSessionFunc: func(bucketName string, encryptionEnabled bool, s *session.Session) event.S3Reader {
// 	               panic("mock out the DoGetS3ClientWithSession method")
//             },
//         }
//
//         // use mockedInitialiser in code that requires service.Initialiser
//         // and then make assertions.
//
//     }
type InitialiserMock struct {
	// DoGetHTTPServerFunc mocks the DoGetHTTPServer method.
	DoGetHTTPServerFunc func(bindAddr string, router http.Handler) service.HTTPServer

	// DoGetHealthCheckFunc mocks the DoGetHealthCheck method.
	DoGetHealthCheckFunc func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error)

	// DoGetImageAPIFunc mocks the DoGetImageAPI method.
	DoGetImageAPIFunc func(ctx context.Context, cfg *config.Config) event.ImageAPIClient

	// DoGetKafkaConsumerFunc mocks the DoGetKafkaConsumer method.
	DoGetKafkaConsumerFunc func(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error)

	// DoGetS3ClientFunc mocks the DoGetS3Client method.
	DoGetS3ClientFunc func(awsRegion string, bucketName string) (event.S3Writer, error)

	// DoGetS3ClientWithSessionFunc mocks the DoGetS3ClientWithSession method.
	DoGetS3ClientWithSessionFunc func(bucketName string, s *session.Session) event.S3Reader

	// calls tracks calls to the methods.
	calls struct {
		// DoGetHTTPServer holds details about calls to the DoGetHTTPServer method.
		DoGetHTTPServer []struct {
			// BindAddr is the bindAddr argument value.
			BindAddr string
			// Router is the router argument value.
			Router http.Handler
		}
		// DoGetHealthCheck holds details about calls to the DoGetHealthCheck method.
		DoGetHealthCheck []struct {
			// Cfg is the cfg argument value.
			Cfg *config.Config
			// BuildTime is the buildTime argument value.
			BuildTime string
			// GitCommit is the gitCommit argument value.
			GitCommit string
			// Version is the version argument value.
			Version string
		}
		// DoGetImageAPI holds details about calls to the DoGetImageAPI method.
		DoGetImageAPI []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// DoGetKafkaConsumer holds details about calls to the DoGetKafkaConsumer method.
		DoGetKafkaConsumer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// DoGetS3Client holds details about calls to the DoGetS3Client method.
		DoGetS3Client []struct {
			// AwsRegion is the awsRegion argument value.
			AwsRegion string
			// BucketName is the bucketName argument value.
			BucketName string
		}
		// DoGetS3ClientWithSession holds details about calls to the DoGetS3ClientWithSession method.
		DoGetS3ClientWithSession []struct {
			// BucketName is the bucketName argument value.
			BucketName string
			// S is the s argument value.
			S *session.Session
		}
	}
}

// DoGetHTTPServer calls DoGetHTTPServerFunc.
func (mock *InitialiserMock) DoGetHTTPServer(bindAddr string, router http.Handler) service.HTTPServer {
	if mock.DoGetHTTPServerFunc == nil {
		panic("InitialiserMock.DoGetHTTPServerFunc: method is nil but Initialiser.DoGetHTTPServer was just called")
	}
	callInfo := struct {
		BindAddr string
		Router   http.Handler
	}{
		BindAddr: bindAddr,
		Router:   router,
	}
	lockInitialiserMockDoGetHTTPServer.Lock()
	mock.calls.DoGetHTTPServer = append(mock.calls.DoGetHTTPServer, callInfo)
	lockInitialiserMockDoGetHTTPServer.Unlock()
	return mock.DoGetHTTPServerFunc(bindAddr, router)
}

// DoGetHTTPServerCalls gets all the calls that were made to DoGetHTTPServer.
// Check the length with:
//     len(mockedInitialiser.DoGetHTTPServerCalls())
func (mock *InitialiserMock) DoGetHTTPServerCalls() []struct {
	BindAddr string
	Router   http.Handler
} {
	var calls []struct {
		BindAddr string
		Router   http.Handler
	}
	lockInitialiserMockDoGetHTTPServer.RLock()
	calls = mock.calls.DoGetHTTPServer
	lockInitialiserMockDoGetHTTPServer.RUnlock()
	return calls
}

// DoGetHealthCheck calls DoGetHealthCheckFunc.
func (mock *InitialiserMock) DoGetHealthCheck(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
	if mock.DoGetHealthCheckFunc == nil {
		panic("InitialiserMock.DoGetHealthCheckFunc: method is nil but Initialiser.DoGetHealthCheck was just called")
	}
	callInfo := struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}{
		Cfg:       cfg,
		BuildTime: buildTime,
		GitCommit: gitCommit,
		Version:   version,
	}
	lockInitialiserMockDoGetHealthCheck.Lock()
	mock.calls.DoGetHealthCheck = append(mock.calls.DoGetHealthCheck, callInfo)
	lockInitialiserMockDoGetHealthCheck.Unlock()
	return mock.DoGetHealthCheckFunc(cfg, buildTime, gitCommit, version)
}

// DoGetHealthCheckCalls gets all the calls that were made to DoGetHealthCheck.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthCheckCalls())
func (mock *InitialiserMock) DoGetHealthCheckCalls() []struct {
	Cfg       *config.Config
	BuildTime string
	GitCommit string
	Version   string
} {
	var calls []struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}
	lockInitialiserMockDoGetHealthCheck.RLock()
	calls = mock.calls.DoGetHealthCheck
	lockInitialiserMockDoGetHealthCheck.RUnlock()
	return calls
}

// DoGetImageAPI calls DoGetImageAPIFunc.
func (mock *InitialiserMock) DoGetImageAPI(ctx context.Context, cfg *config.Config) event.ImageAPIClient {
	if mock.DoGetImageAPIFunc == nil {
		panic("InitialiserMock.DoGetImageAPIFunc: method is nil but Initialiser.DoGetImageAPI was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cfg *config.Config
	}{
		Ctx: ctx,
		Cfg: cfg,
	}
	lockInitialiserMockDoGetImageAPI.Lock()
	mock.calls.DoGetImageAPI = append(mock.calls.DoGetImageAPI, callInfo)
	lockInitialiserMockDoGetImageAPI.Unlock()
	return mock.DoGetImageAPIFunc(ctx, cfg)
}

// DoGetImageAPICalls gets all the calls that were made to DoGetImageAPI.
// Check the length with:
//     len(mockedInitialiser.DoGetImageAPICalls())
func (mock *InitialiserMock) DoGetImageAPICalls() []struct {
	Ctx context.Context
	Cfg *config.Config
} {
	var calls []struct {
		Ctx context.Context
		Cfg *config.Config
	}
	lockInitialiserMockDoGetImageAPI.RLock()
	calls = mock.calls.DoGetImageAPI
	lockInitialiserMockDoGetImageAPI.RUnlock()
	return calls
}

// DoGetKafkaConsumer calls DoGetKafkaConsumerFunc.
func (mock *InitialiserMock) DoGetKafkaConsumer(ctx context.Context, cfg *config.Config) (kafka.IConsumerGroup, error) {
	if mock.DoGetKafkaConsumerFunc == nil {
		panic("InitialiserMock.DoGetKafkaConsumerFunc: method is nil but Initialiser.DoGetKafkaConsumer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cfg *config.Config
	}{
		Ctx: ctx,
		Cfg: cfg,
	}
	lockInitialiserMockDoGetKafkaConsumer.Lock()
	mock.calls.DoGetKafkaConsumer = append(mock.calls.DoGetKafkaConsumer, callInfo)
	lockInitialiserMockDoGetKafkaConsumer.Unlock()
	return mock.DoGetKafkaConsumerFunc(ctx, cfg)
}

// DoGetKafkaConsumerCalls gets all the calls that were made to DoGetKafkaConsumer.
// Check the length with:
//     len(mockedInitialiser.DoGetKafkaConsumerCalls())
func (mock *InitialiserMock) DoGetKafkaConsumerCalls() []struct {
	Ctx context.Context
	Cfg *config.Config
} {
	var calls []struct {
		Ctx context.Context
		Cfg *config.Config
	}
	lockInitialiserMockDoGetKafkaConsumer.RLock()
	calls = mock.calls.DoGetKafkaConsumer
	lockInitialiserMockDoGetKafkaConsumer.RUnlock()
	return calls
}

// DoGetS3Client calls DoGetS3ClientFunc.
func (mock *InitialiserMock) DoGetS3Client(awsRegion string, bucketName string) (event.S3Writer, error) {
	if mock.DoGetS3ClientFunc == nil {
		panic("InitialiserMock.DoGetS3ClientFunc: method is nil but Initialiser.DoGetS3Client was just called")
	}
	callInfo := struct {
		AwsRegion         string
		BucketName        string
	}{
		AwsRegion:         awsRegion,
		BucketName:        bucketName,
	}
	lockInitialiserMockDoGetS3Client.Lock()
	mock.calls.DoGetS3Client = append(mock.calls.DoGetS3Client, callInfo)
	lockInitialiserMockDoGetS3Client.Unlock()
	return mock.DoGetS3ClientFunc(awsRegion, bucketName)
}

// DoGetS3ClientCalls gets all the calls that were made to DoGetS3Client.
// Check the length with:
//     len(mockedInitialiser.DoGetS3ClientCalls())
func (mock *InitialiserMock) DoGetS3ClientCalls() []struct {
	AwsRegion         string
	BucketName        string
} {
	var calls []struct {
		AwsRegion         string
		BucketName        string
	}
	lockInitialiserMockDoGetS3Client.RLock()
	calls = mock.calls.DoGetS3Client
	lockInitialiserMockDoGetS3Client.RUnlock()
	return calls
}

// DoGetS3ClientWithSession calls DoGetS3ClientWithSessionFunc.
func (mock *InitialiserMock) DoGetS3ClientWithSession(bucketName string, s *session.Session) event.S3Reader {
	if mock.DoGetS3ClientWithSessionFunc == nil {
		panic("InitialiserMock.DoGetS3ClientWithSessionFunc: method is nil but Initialiser.DoGetS3ClientWithSession was just called")
	}
	callInfo := struct {
		BucketName        string
		S                 *session.Session
	}{
		BucketName:        bucketName,
		S:                 s,
	}
	lockInitialiserMockDoGetS3ClientWithSession.Lock()
	mock.calls.DoGetS3ClientWithSession = append(mock.calls.DoGetS3ClientWithSession, callInfo)
	lockInitialiserMockDoGetS3ClientWithSession.Unlock()
	return mock.DoGetS3ClientWithSessionFunc(bucketName, s)
}

// DoGetS3ClientWithSessionCalls gets all the calls that were made to DoGetS3ClientWithSession.
// Check the length with:
//     len(mockedInitialiser.DoGetS3ClientWithSessionCalls())
func (mock *InitialiserMock) DoGetS3ClientWithSessionCalls() []struct {
	BucketName        string
	S                 *session.Session
} {
	var calls []struct {
		BucketName        string
		S                 *session.Session
	}
	lockInitialiserMockDoGetS3ClientWithSession.RLock()
	calls = mock.calls.DoGetS3ClientWithSession
	lockInitialiserMockDoGetS3ClientWithSession.RUnlock()
	return calls
}
